apiVersion: v1
kind: Secret
metadata:
  name: elasticsearch-searchguard
  namespace: {{ .Values.namespace }}
  labels:
    app: elasticsearch
type: Opaque
stringData:
  ADMIN_PASSWORD: {{ .Values.sysdig.searchguard.adminUser.password }}
  READONLY_PASSWORD: {{ .Values.sysdig.searchguard.readonly.password }}
  SG_PASSWORD: {{ .Values.sysdig.searchguard.adminUser.password }}
---
apiVersion: v1
kind: Secret
metadata:
  name: elasticsearch-searchguard-config-files
  namespace: {{ .Values.namespace }}
  labels:
    app: elasticsearch
type: Opaque
stringData:
  sg_action_groups.yml: |-
    UNLIMITED:
      - "*"
    ###### INDEX LEVEL ######
    INDICES_ALL:
      - "indices:*"
    # for backward compatibility
    ALL:
      - INDICES_ALL
    MANAGE:
      - "indices:monitor/*"
      - "indices:admin/*"
    CREATE_INDEX:
      - "indices:admin/create"
      - "indices:admin/mapping/put"
    MANAGE_ALIASES:
      - "indices:admin/aliases*"
    # for backward compatibility
    MONITOR:
      - INDICES_MONITOR
    INDICES_MONITOR:
      - "indices:monitor/*"
    DATA_ACCESS:
      - "indices:data/*"
      - CRUD
    WRITE:
      - "indices:data/write*"
      - "indices:admin/mapping/put"
    READ:
      - "indices:data/read*"
      - "indices:admin/mappings/fields/get*"
    DELETE:
      - "indices:data/write/delete*"
    CRUD:
      - READ
      - WRITE
    SEARCH:
      - "indices:data/read/search*"
      - "indices:data/read/msearch*"
      - SUGGEST
    SUGGEST:
      - "indices:data/read/suggest*"
    INDEX:
      - "indices:data/write/index*"
      - "indices:data/write/update*"
      - "indices:admin/mapping/put"
      - "indices:data/write/bulk*"
    GET:
      - "indices:data/read/get*"
      - "indices:data/read/mget*"
    ###### CLUSTER LEVEL ######
    CLUSTER_ALL:
      - "cluster:*"
    CLUSTER_MONITOR:
      - "cluster:monitor/*"
    CLUSTER_COMPOSITE_OPS_RO:
      - "indices:data/read/mget"
      - "indices:data/read/msearch"
      - "indices:data/read/mtv"
      - "indices:data/read/coordinate-msearch*"
      - "indices:admin/aliases/exists*"
      - "indices:admin/aliases/get*"
    CLUSTER_COMPOSITE_OPS:
      - "indices:data/write/bulk"
      - "indices:admin/aliases*"
      - CLUSTER_COMPOSITE_OPS_RO
      
    MANAGE_SNAPSHOTS:
      - "cluster:admin/snapshot/*"
      - "cluster:admin/repository/*"
  sg_config.yml: |-
    searchguard:
      dynamic:
        http:
          anonymous_auth_enabled: false
          xff:
            enabled: false
            internalProxies: '.*' 
            remoteIpHeader:  'x-forwarded-for'
            proxiesHeader:   'x-forwarded-by'
            trustedProxies: '.*' 
        authc:
          basic_internal_auth_domain: 
            enabled: true
            order: 1
            http_authenticator:
              type: basic
              challenge: true
            authentication_backend:
              type: intern
  sg_internal_users.yml: |-
    # This is the internal user database
    # The hash value is a bcrypt hash and can be generated with plugin/tools/hash.sh
    {{ .Values.elasticsearch.searchguard.adminUser }}:
      hash: ${ADMIN_PWD_HASH} # password is: ${ADMIN_PASSWORD}
      roles:
      - sg_admin
    readonly:
      hash: ${READONLY_PWD_HASH} # password is: ${READONLY_PASSWORD}
      roles:
      - sg_readonly
  sg_roles_mapping.yml: |-
    sg_admin:
      users:
        - {{ .Values.elasticsearch.searchguard.adminUser }}
    sg_public:
      users:
        - '*'
    sg_readonly:
      users:
        - readonly
    sg_own_index:
      users:
        - '*'
  sg_roles.yml: |-
    #<sg_role_name>:
    #  cluster:
    #    - '<permission>'
    #  indices:
    #    '<indexname or alias>':
    #      '<type>':  
    #        - '<permission>'
    #      _dls_: '<querydsl query>'
    #      _fls_:
    #        - '<field>'
    #        - '<field>'
    # When a user make a request to elasticsearch then the following roles will be evaluated to see if the user has
    # permissions for the request. A request is always associated with an action and is executed against and index (or alias)
    # and a type. If a request is executed against all indices (or all types) then the asterix ('*') is needed.
    # Every role a user has will be examined if it allows the action against an index (or type). At least one role must match
    # for the request to be successful. If no role match then the request will be denied. Currently a match must happen within
    # one single role - that means that permissions can not span multiple roles. 
    # For <permission>, <indexname or alias> and <type> simple wildcards and regular expressions are possible. 
    # A asterix (*) will match any character sequence (or an empty sequence)
    # A question mark (?) will match any single character (but NOT empty character)
    # Example: '*my*index' will match 'my_first_index' as well as 'myindex' but not 'myindex1'
    # Example: '?kibana' will match '.kibana' but not 'kibana'
    # To use a full blown regex you have to pre- and apend a '/' to use regex instead of simple wildcards
    # '/<java regex>/'
    # Example: '/\S*/' will match any non whitespace characters
    # Important: 
    # Index, alias or type names can not contain dots (.) in the <indexname or alias> or <type> expression.
    # Reason is that we currently parse the config file into a elasticsearch settings object which cannot cope with dots in keys.
    # Workaround: Just configure something like '?kibana' instead of '.kibana' or 'my?index' instead of 'my.index'
    # This limitation will likely removed with Search Guard 6
    # Default role for all users (including anonymous)
    sg_public:
      cluster:
        - cluster:monitor/main
        - CLUSTER_COMPOSITE_OPS_RO
    sg_admin:
      cluster:
        - UNLIMITED
      indices:
        '*':
          '*':
            - ALL
    sg_readonly:
      cluster:
        - CLUSTER_MONITOR
        - CLUSTER_COMPOSITE_OPS_RO
      indices:
        '*':
          '*':
            - INDICES_ALL
    # Allows each user to access own named index
    sg_own_index:
      cluster:
        - CLUSTER_COMPOSITE_OPS
      indices:
        '${user_name}':
          '*':
            - INDICES_ALL
